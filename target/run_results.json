{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.0", "generated_at": "2024-12-18T19:36:29.884303Z", "invocation_id": "6246c7af-6d7b-433b-ac0b-70059a16b237", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T19:36:26.898121Z", "completed_at": "2024-12-18T19:36:26.901568Z"}, {"name": "execute", "started_at": "2024-12-18T19:36:26.902243Z", "completed_at": "2024-12-18T19:36:27.905560Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0201058387756348, "adapter_response": {"_message": "SELECT 403", "code": "SELECT", "rows_affected": 403}, "message": "SELECT 403", "failures": null, "unique_id": "model.ad_intel_dbt.metrics_merge", "compiled": true, "compiled_code": "\n\n-- Merge from Google Ads\nSELECT \n    date as data_date,\n    clicks,\n    impressions as impr,\n    (cost_micros / 1000000.0) as cost,\n    CASE \n        WHEN impressions > 0 THEN ROUND(CAST(((cost_micros / 1000000.0) / impressions) * 1000 AS numeric), 2)\n        ELSE 0 \n    END as cpm,\n    CASE \n        WHEN impressions > 0 THEN ROUND(CAST((clicks::float / impressions) * 100 AS numeric), 2)\n        ELSE 0 \n    END as ctr,\n    CASE \n        WHEN clicks > 0 THEN ROUND(CAST((cost_micros / 1000000.0) / clicks AS numeric), 2)\n        ELSE 0 \n    END as cpc,\n    EXTRACT(MONTH FROM date)::integer as month,\n    EXTRACT(YEAR FROM date)::integer as year,\n    'paid' as paid_organic,\n    'Google Ads' as traffic_source,\n    'Google Ads' as data_source_type,\n    'Google' as platform,\n    customer_id::text as src_account_id,\n    id::text as src_campaign_id,\n    name as src_campaign_name\nFROM \"postgres\".\"test_googleads_schema\".\"test_googleads_campaings\"\n\nUNION ALL\n\nSELECT \n    date as data_date,\n    clicks,\n    impressions as impr,\n    spend as cost,\n    CASE \n        WHEN impressions > 0 THEN ROUND(CAST((spend / impressions) * 1000 AS numeric), 2)\n        ELSE 0 \n    END as cpm,\n    CASE \n        WHEN impressions > 0 THEN ROUND(CAST((clicks::float / impressions) * 100 AS numeric), 2)\n        ELSE 0 \n    END as ctr,\n    CASE \n        WHEN clicks > 0 THEN ROUND(CAST(spend / clicks AS numeric), 2)\n        ELSE 0 \n    END as cpc,\n    EXTRACT(MONTH FROM date)::integer as month,\n    EXTRACT(YEAR FROM date)::integer as year,\n    'paid' as paid_organic,\n    'Facebook Ads' as traffic_source,\n    'Facebook Ads' as data_source_type,\n    'Facebook' as platform,\n    account_id::text as src_account_id,\n    campaign_id::text as src_campaign_id,\n    campaign_name as src_campaign_name\nFROM \"postgres\".\"facebook_ads\".\"test_facebook_ads\"", "relation_name": "\"postgres\".\"test_ad_reporting\".\"metrics_merge\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T19:36:26.887288Z", "completed_at": "2024-12-18T19:36:26.901856Z"}, {"name": "execute", "started_at": "2024-12-18T19:36:26.922003Z", "completed_at": "2024-12-18T19:36:28.140584Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2558739185333252, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.ad_intel_dbt.consolidated_ads", "compiled": true, "compiled_code": "WITH facebook_data AS (\n    SELECT \n        'facebook' as platform,\n        date,\n        account_id::text as account_id,\n        campaign_id as campaign_id,\n        campaign_name,\n        clicks,\n        impressions,\n        spend as cost,\n        CASE \n            WHEN impressions > 0 THEN ROUND(CAST((clicks::float / impressions::float) * 100 AS numeric), 2)\n            ELSE 0 \n        END as ctr,\n        CASE \n            WHEN clicks > 0 THEN ROUND(CAST(spend / clicks AS numeric), 2)\n            ELSE 0 \n        END as cpc,\n        CASE \n            WHEN impressions > 0 THEN ROUND(CAST((spend / impressions) * 1000 AS numeric), 2)\n            ELSE 0 \n        END as cpm\n    FROM \"postgres\".\"facebook_ads\".\"test_facebook_ads\"\n),\n\ngoogle_data AS (\n    SELECT \n        'google' as platform,\n        date,\n        customer_id::text as account_id,\n        id::text as campaign_id,\n        name as campaign_name,\n        clicks,\n        impressions,\n        (cost_micros / 1000000.0) as cost,\n        CASE \n            WHEN impressions > 0 THEN ROUND(CAST((clicks::float / impressions) * 100 AS numeric), 2)\n            ELSE 0 \n        END as ctr,\n        CASE \n            WHEN clicks > 0 THEN ROUND(CAST((cost_micros / 1000000.0) / clicks AS numeric), 2)\n            ELSE 0 \n        END as cpc,\n        CASE \n            WHEN impressions > 0 THEN ROUND(CAST(((cost_micros / 1000000.0) / impressions) * 1000 AS numeric), 2)\n            ELSE 0 \n        END as cpm\n    FROM \"postgres\".\"test_googleads_schema\".\"test_googleads_campaings\"\n)\n\nSELECT \n    platform,\n    date,\n    account_id,\n    campaign_id,\n    campaign_name,\n    clicks,\n    impressions,\n    cost,\n    ctr,\n    cpc,\n    cpm\nFROM facebook_data\n\nUNION ALL\n\nSELECT \n    platform,\n    date,\n    account_id,\n    campaign_id,\n    campaign_name,\n    clicks,\n    impressions,\n    cost,\n    ctr,\n    cpc,\n    cpm\nFROM google_data", "relation_name": "\"postgres\".\"test_ad_reporting\".\"consolidated_ads\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T19:36:27.908533Z", "completed_at": "2024-12-18T19:36:27.910305Z"}, {"name": "execute", "started_at": "2024-12-18T19:36:27.910482Z", "completed_at": "2024-12-18T19:36:29.023022Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1169509887695312, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": "SELECT 1", "failures": null, "unique_id": "model.ad_intel_dbt.metrics_update", "compiled": true, "compiled_code": "\n\nSELECT 1", "relation_name": "\"postgres\".\"test_ad_reporting\".\"metrics_update\"", "batch_results": null}], "elapsed_time": 6.0008320808410645, "args": {"require_batched_execution_for_custom_microbatch_strategy": false, "select": [], "printer_width": 80, "introspect": true, "partial_parse": true, "use_colors": true, "favor_state": false, "empty": false, "log_format": "default", "log_path": "/Users/jacksonwhiting/programming/ad_intel_dbt/logs", "project_dir": "/Users/jacksonwhiting/programming/ad_intel_dbt", "partial_parse_file_diff": true, "state_modified_compare_more_unrendered_values": false, "profiles_dir": "/Users/jacksonwhiting/.dbt", "defer": false, "vars": {}, "print": true, "require_nested_cumulative_type_params": false, "strict_mode": false, "populate_cache": true, "log_file_max_bytes": 10485760, "which": "run", "send_anonymous_usage_stats": true, "static_parser": true, "write_json": true, "require_explicit_package_overrides_for_builtin_materializations": true, "cache_selected_only": false, "source_freshness_run_project_hooks": false, "version_check": true, "log_format_file": "debug", "skip_nodes_if_on_run_start_fails": false, "macro_debugging": false, "indirect_selection": "eager", "require_yaml_configuration_for_mf_time_spines": false, "use_colors_file": true, "warn_error_options": {"include": [], "exclude": []}, "exclude": [], "require_resource_names_without_spaces": false, "log_level": "info", "state_modified_compare_vars": false, "show_resource_report": false, "log_level_file": "debug", "quiet": false, "invocation_command": "dbt run"}}